class Map {
    constructor(config) {
        this.gameObject = config.gameObject;
        this.walls = config.walls || {};

        this.lowerImage = new Image();
        this.lowerImage.src = config.lowerSrc;

        this.upperImage = new Image();
        this.upperImage.src = config.upperSrc;

        this.bullets = [];
        this.cd = 0;
        this.maptab = config.maptab || [];

        this.defaultState = [
            { "0-4": [3, 2], "1-4": [4, 2], "2-4": [4, 2], "3-4": [4, 2], "4-4": [4, 1], "5-5": [4, 2], "6-5": [4, 2], "7-5": [4, 2], "8-5": [4, 2], "9-5": [4, 2], "10-5": [4, 2], "11-6": [3, 2], "12-6": [4, 2], "13-6": [4, 2], "14-6": [4, 2], "12-5": [4, 1], "5-4": [4, 1], "3-3": [4, 1], "0-3": [4, 1], "1-3": [4, 1], "4-3": [4, 1], "5-3": [4, 1], "7-3": [4, 1], "8-3": [4, 1], "9-3": [4, 1], "10-3": [4, 1], "10-4": [4, 1], "11-4": [4, 1], "11-5": [4, 1], "4-5": [3, 2], "2-3": [4, 1], "6-3": [4, 1], "11-3": [4, 1], "12-3": [4, 1], "13-3": [4, 1], "14-3": [4, 1], "6-4": [4, 1], "7-4": [4, 1], "8-4": [4, 1], "9-4": [4, 1], "12-4": [4, 1], "13-4": [4, 1], "14-4": [4, 1], "13-5": [4, 1], "14-5": [4, 1], "14-2": [4, 1], "13-2": [4, 1], "12-2": [4, 1], "11-2": [4, 1], "10-2": [4, 1], "9-2": [4, 1], "8-2": [4, 1], "7-2": [4, 1], "6-2": [4, 1], "5-2": [4, 1], "4-2": [4, 1], "3-2": [4, 1], "2-2": [4, 1], "1-2": [4, 1], "0-2": [4, 1], "0-1": [4, 1], "1-1": [4, 1], "2-1": [4, 1], "3-1": [4, 1], "4-1": [4, 1], "6-1": [4, 1], "8-1": [4, 1], "9-1": [4, 1], "10-1": [4, 1], "11-1": [4, 1], "12-1": [4, 1], "13-1": [4, 1], "14-1": [4, 1], "7-1": [4, 1], "5-1": [4, 1], "0-0": [4, 1], "1-0": [4, 1], "2-0": [4, 1], "3-0": [4, 1], "4-0": [4, 1], "5-0": [4, 1], "6-0": [4, 1], "7-0": [4, 1], "8-0": [4, 1], "9-0": [4, 1], "10-0": [4, 1], "11-0": [4, 1], "12-0": [4, 1], "13-0": [4, 1], "14-0": [4, 1], "14-14": [2, 6], "7-14": [3, 6], "6-14": [2, 6], "5-14": [3, 6], "4-13": [3, 6], "3-13": [2, 6], "1-11": [2, 10], "1-10": [2, 10], "0-8": [0, 6], "0-10": [2, 10], "3-10": [3, 6], "4-10": [2, 6], "0-5": [3, 6], "0-6": [0, 6], "0-7": [1, 6], "0-9": [1, 6], "0-11": [2, 10], "0-12": [2, 10], "0-13": [2, 10], "0-14": [0, 6], "1-14": [1, 6], "1-13": [2, 10], "1-12": [3, 6], "1-9": [2, 6], "1-8": [1, 6], "1-7": [0, 6], "1-6": [3, 6], "1-5": [2, 6], "2-5": [3, 6], "2-6": [2, 6], "2-7": [3, 6], "2-8": [0, 6], "2-9": [3, 6], "2-13": [2, 10], "2-14": [0, 6], "3-14": [1, 6], "3-12": [3, 6], "3-11": [2, 6], "3-9": [2, 6], "3-8": [3, 6], "3-7": [2, 6], "3-6": [3, 6], "3-5": [2, 6], "4-6": [2, 6], "4-7": [3, 6], "4-8": [2, 6], "4-9": [3, 6], "4-11": [3, 6], "4-12": [2, 6], "4-14": [2, 6], "5-13": [2, 6], "5-12": [4, 10], "5-11": [4, 10], "5-10": [4, 10], "5-9": [4, 10], "5-8": [3, 6], "5-7": [2, 6], "5-6": [3, 6], "6-6": [2, 6], "6-7": [3, 6], "6-8": [2, 6], "6-9": [4, 10], "6-10": [4, 10], "6-11": [4, 10], "6-12": [4, 10], "6-13": [3, 6], "7-13": [2, 6], "7-12": [4, 10], "7-10": [4, 10], "7-9": [4, 10], "7-8": [3, 6], "7-7": [2, 6], "7-6": [3, 6], "8-6": [2, 6], "8-7": [3, 6], "8-10": [4, 10], "8-11": [4, 10], "8-12": [4, 10], "8-14": [2, 6], "8-13": [3, 6], "9-14": [3, 6], "9-13": [2, 6], "9-12": [4, 10], "9-11": [4, 10], "9-10": [4, 10], "9-7": [2, 6], "9-6": [3, 6], "10-7": [3, 6], "10-8": [2, 6], "10-9": [3, 6], "10-10": [2, 6], "10-11": [3, 6], "10-12": [2, 6], "10-13": [3, 6], "10-14": [2, 6], "10-6": [2, 6], "11-7": [2, 6], "12-7": [3, 6], "13-7": [2, 6], "14-7": [2, 6], "14-8": [2, 6], "14-9": [3, 6], "14-10": [4, 3], "14-11": [4, 4], "14-12": [2, 6], "14-13": [3, 6], "13-14": [3, 6], "12-14": [2, 6], "11-14": [3, 6], "11-13": [2, 6], "12-13": [3, 6], "13-13": [2, 6], "13-12": [3, 6], "12-12": [2, 6], "11-12": [3, 6], "11-11": [2, 6], "12-11": [3, 6], "13-11": [4, 4], "13-10": [2, 6], "12-10": [2, 6], "11-10": [3, 6], "12-9": [3, 6], "13-9": [2, 6], "13-8": [3, 6], "12-8": [2, 6], "11-9": [2, 6], "11-8": [3, 6], "2-10": [2, 10], "2-11": [2, 10], "2-12": [2, 10], "8-9": [4, 10], "8-8": [4, 10], "9-9": [4, 10], "9-8": [4, 10], "7-11": [4, 10] }, { "5-9": [2, 7], "6-9": [2, 7], "7-9": [2, 7], "3-9": [0, 6], "3-11": [0, 6], "3-13": [0, 6], "1-9": [0, 6], "2-9": [1, 6], "1-10": [1, 7], "3-10": [1, 6], "3-12": [1, 6], "2-10": [1, 7], "1-12": [2, 10], "0-8": [1, 2], "1-8": [1, 2], "2-8": [1, 2], "2-7": [2, 1], "2-6": [2, 0], "1-6": [1, 0], "0-6": [1, 0], "1-7": [1, 1], "0-7": [1, 1], "11-11": [3, 3], "12-11": [4, 3], "13-11": [4, 4], "14-11": [4, 4], "11-12": [3, 4], "11-13": [3, 5], "12-13": [4, 5], "13-13": [4, 5], "14-13": [4, 5], "12-12": [4, 4], "13-12": [4, 4], "14-12": [4, 4], "0-10": [0, 7], "13-10": [3, 3], "11-5": [3, 1], "4-4": [3, 1], "8-8": [2, 7], "9-8": [2, 7] }, { "0-5": [4, 12], "1-5": [4, 12], "2-5": [4, 12], "3-5": [4, 12], "4-6": [4, 12], "5-6": [4, 12], "6-6": [4, 12], "7-6": [4, 12], "8-6": [4, 12], "9-6": [4, 12], "10-6": [4, 12], "11-7": [4, 12], "12-7": [4, 12], "13-7": [4, 12], "14-7": [4, 12], "0-9": [4, 12], "1-9": [4, 12], "2-9": [4, 12], "11-14": [4, 12], "12-14": [4, 12], "13-14": [4, 12], "14-14": [4, 12], "6-2": [2, 15], "6-3": [0, 13], "7-3": [3, 12], "8-3": [0, 14], "9-3": [1, 16], "10-3": [1, 15], "11-3": [4, 15], "4-2": [4, 14], "5-2": [0, 12], "4-1": [0, 13], "3-1": [3, 14], "1-1": [1, 16], "2-1": [0, 14], "11-1": [4, 2], "12-1": [4, 2], "13-1": [5, 2], "11-0": [4, 0], "12-0": [4, 0], "13-0": [5, 0], "10-1": [4, 2], "9-1": [3, 2], "10-0": [4, 0], "9-0": [3, 0], "9-2": [4, 12], "10-2": [4, 12], "11-2": [4, 12], "12-2": [4, 12], "13-2": [4, 12], "5-13": [4, 13], "9-13": [5, 13], "6-13": [4, 11], "7-13": [4, 11], "8-13": [4, 11], "0-14": [4, 11], "1-14": [4, 11], "2-14": [5, 13] }
        ];
        this.im = new Image();
        this.im.src = "images/maps/tile.png";
    }

    init() {

    }


    draw(ctx, cameraPerson) {
        ctx.clearRect(0, 0, ctx.width, ctx.height);

        var size_of_crop = 16;

        this.defaultState.forEach((layer) => {
            Object.keys(layer).forEach((key) => {
                //Determine x/y position of this placement from key ("3-4" -> x=3, y=4)
                var positionX = Number(key.split("-")[0]);
                var positionY = Number(key.split("-")[1]);
                var [tilesheetX, tilesheetY] = layer[key];

                ctx.drawImage(
                    this.im,
                    tilesheetX * 16,
                    tilesheetY * 16,
                    size_of_crop,
                    size_of_crop,
                    positionX * 16 - cameraPerson.x,
                    positionY * 16 - cameraPerson.y,
                    size_of_crop,
                    size_of_crop
                );
            });
        });
    }

    /*
        draw(ctx, cameraPerson) {
            for (let i = 0; i < this.maptab.length; i++) {
                for (let j = 0; j < this.maptab[i].length; j++) {
                    if (this.maptab[i][j] === "x") {
                        ctx.fillStyle = "#8fce00";
                        ctx.fillRect(utils.withGrid(i) - cameraPerson.x, utils.withGrid(j) - cameraPerson.y, 16, 16);
                    }
                }
            }
        }
        */

    coord() {
        let t = [];
        let line = [];
        for (let i = 0; i < this.maptab.length; i++) {
            line = [];
            for (let j = 0; j < this.maptab[i].length; j++) {
                var coord = "" + utils.withGrid(i) + "," + utils.withGrid(j);
                line.push(coord);
            }
            t.push(line);
        }
        console.log(t);
    }

    changeBlock(x, y, ctx, cameraPerson) {
        this.coord();
        let div = 8;
        console.log("pos", x, y);
        var rect = ctx.getBoundingClientRect();
        console.log("rec", rect.top, rect.left);
        console.log("pos - rec", x - rect.top, y - rect.left);
        const nx = Math.floor((x - rect.top + cameraPerson.x) / div);
        const ny = Math.floor((y - rect.left + cameraPerson.y) / div);
        console.log("n", nx, ny)
        for (let i = 0; i < this.maptab.length; i++) {
            for (let j = 0; j < this.maptab[i].length; j++) {
                if (nx >= utils.withGrid(i) && nx <= utils.withGrid(i) + 16 && ny >= utils.withGrid(j) && ny <= utils.withGrid(j) + 16) {
                    if (this.maptab[i][j] === "x") {
                        this.maptab[i][j] = "o";
                    } else {
                        this.maptab[i][j] = "x";
                    }
                }
            }
        }
    }

}

window.OverworldMap = {
    DemoRoom: {
        lowerSrc: "images/maps/DemoLower.png",
        upperSrc: "images/maps/DemoUpper.png",
        gameObject: {
            hero: new Person({
                name: "hero",
                isPlayerControlled: true,
                x: utils.withGrid(6),
                y: utils.withGrid(4),
            }),
        },
        maptab: [
            ["x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "x"],
            ["x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x"]
        ],
        walls: [
            //{ x1: 99, y1: 84, x2: 141, y2: 120, type: "wall" },
        ]
    },
}

/*
[utils.asGridCoord(7, 6)]: true,
[utils.asGridCoord(8, 6)]: true,
[utils.asGridCoord(7, 7)]: true,
[utils.asGridCoord(8, 7)]: true,
*/